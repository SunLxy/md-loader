{"version":3,"file":"static/js/38.2a87ff8b.chunk.js","mappings":"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","sources":["App-zh.md"],"sourcesContent":["\n    \n  import React from \"react\";\nimport ReactDOM from \"react-dom\";\n  \n    \n  import { Alert,ButtonGroup,Button, } from \"uiw\";\n\n  \n   \n    const BaseCode19 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false\n    };\n  }\n\n  onClick(type) {\n    this.setState({\n      [type]: !this.state[type]\n    });\n  }\n\n  onClosed(type) {\n    this.setState({\n      [type]: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert isOpen={this.state.visible1} confirmText=\"确定按钮\" onClosed={this.onClosed.bind(this, \"visible1\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible2} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"danger\" onConfirm={() => console.log(\"您点击了确定按钮！\")} onCancel={() => console.log(\"您点击了取消按钮！\")} onClosed={this.onClosed.bind(this, \"visible2\")}>\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")}>\n            单个按钮确认对话框\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")}>\n            确认对话框\n          </Button>\n        </ButtonGroup>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode19 = Demo;\n      return <ComponentBaseCode19/>\n    }\n    ;\n\n    const BaseCode81 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false\n    };\n  }\n\n  onClick() {\n    this.setState({\n      visible: !this.statevisible\n    });\n  }\n\n  onClosed() {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert icon=\"delete\" isOpen={this.state.visible} confirmText=\"确定按钮\" type=\"danger\" onConfirm={() => {\n        console.log(\"确定回调！, 这里是利用Promise等执行完成再去关闭窗口\");\n        return new Promise((resolve, reject) => {\n          const random = Math.random();\n          console.log(\"测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误\", random, random > 0.5);\n          setTimeout(random > 0.5 ? resolve : reject, 3000);\n        }).catch(() => {// 可以通过下面方式，阻止弹框消失\n          // throw new Error();\n        });\n      }} onClosed={this.onClosed.bind(this, \"visible\")}>\n          这里是利用 <b>Promise</b>{\" \"}\n          的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。\n          <br />\n          <br />\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则\n          执行 <b>reject</b> 触发 <b>catch</b> 错误。\n        </Alert>\n        <Button onClick={this.onClick.bind(this, \"visible\")}>\n          延迟关闭对话框\n        </Button>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode81 = Demo;\n      return <ComponentBaseCode81/>\n    }\n    ;\n\n    const BaseCode147 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false\n    };\n  }\n\n  onClick(type) {\n    this.setState({\n      [type]: !this.state[type]\n    });\n  }\n\n  onClosed(type) {\n    this.setState({\n      [type]: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert isOpen={this.state.visible1} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"information\" type=\"primary\" onClosed={this.onClosed.bind(this, \"visible1\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible2} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"circle-check\" type=\"success\" onClosed={this.onClosed.bind(this, \"visible2\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible3} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"warning\" type=\"warning\" onClosed={this.onClosed.bind(this, \"visible3\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible4} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"circle-close\" type=\"danger\" onClosed={this.onClosed.bind(this, \"visible4\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible5} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"light\" onClosed={this.onClosed.bind(this, \"visible5\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert isOpen={this.state.visible6} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"dark\" onClosed={this.onClosed.bind(this, \"visible6\")}>\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode147 = Demo;\n      return <ComponentBaseCode147/>\n    }\n    ;\n\n    const BaseCode261 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false\n    };\n  }\n\n  onClick(type) {\n    this.setState({\n      [type]: !this.state[type]\n    });\n  }\n\n  onClosed(type) {\n    this.setState({\n      [type]: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible1} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"information\" type=\"primary\" onClosed={this.onClosed.bind(this, \"visible1\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible2} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"success\" onClosed={this.onClosed.bind(this, \"visible2\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible3} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"warning\" type=\"warning\" onClosed={this.onClosed.bind(this, \"visible3\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible4} confirmText=\"确定按钮\" cancelText=\"取消按钮\" icon=\"circle-close\" type=\"danger\" onClosed={this.onClosed.bind(this, \"visible4\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible5} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"light\" onClosed={this.onClosed.bind(this, \"visible5\")} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\" />\n        <Alert title=\"带标题的弹出框\" isOpen={this.state.visible6} confirmText=\"确定按钮\" cancelText=\"取消按钮\" type=\"dark\" onClosed={this.onClosed.bind(this, \"visible6\")}>\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode261 = Demo;\n      return <ComponentBaseCode261/>\n    }\n    ;\n\n    const BaseCode376 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false\n    };\n  }\n\n  onClick(type) {\n    this.setState({\n      visible: !this.state.visible\n    });\n  }\n\n  onClosed(type) {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert isOpen={this.state.visible} type=\"danger\" useButton={false} maskClosable={true} onClose={this.onClosed.bind(this)} // onClosed={this.onClosed.bind(this)}\n      content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\">\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n          <br />\n          <br />\n          <div className=\"w-alert-footer\">\n            <Button type=\"danger\" onClick={this.onClosed.bind(this)}>\n              确定按钮\n            </Button>\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\n          </div>\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode376 = Demo;\n      return <ComponentBaseCode376/>\n    }\n    ;\n\n    const BaseCode432 = ()=>{\n      class Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false\n    };\n  }\n\n  onClick(type) {\n    this.setState({\n      visible: !this.state.visible\n    });\n  }\n\n  onClosed(type) {\n    this.setState({\n      visible: false\n    });\n  }\n\n  render() {\n    return <div>\n        <Alert isOpen={this.state.visible} type=\"danger\" maskClosable={true} hasBackdrop={false} onClose={this.onClosed.bind(this)} onClosed={this.onClosed.bind(this)} content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\">\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>;\n  }\n\n}\n\nconst ComponentBaseCode432 = Demo;\n      return <ComponentBaseCode432/>\n    }\n    ;\n const languageData={19:`jsx`,\n81:`jsx`,\n147:`jsx`,\n261:`jsx`,\n376:`jsx`,\n432:`jsx`,\n};\n const codeBlockValue={19:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"danger\"\n          onConfirm={() => console.log(\"您点击了确定按钮！\")}\n          onCancel={() => console.log(\"您点击了取消按钮！\")}\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")}>\n            单个按钮确认对话框\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")}>\n            确认对话框\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n81:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick() {\n    this.setState({ visible: !this.statevisible });\n  }\n  onClosed() {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          icon=\"delete\"\n          isOpen={this.state.visible}\n          confirmText=\"确定按钮\"\n          type=\"danger\"\n          onConfirm={() => {\n            console.log(\"确定回调！, 这里是利用Promise等执行完成再去关闭窗口\");\n            return new Promise((resolve, reject) => {\n              const random = Math.random();\n              console.log(\n                \"测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误\",\n                random,\n                random > 0.5\n              );\n              setTimeout(random > 0.5 ? resolve : reject, 3000);\n            }).catch(() => {\n              // 可以通过下面方式，阻止弹框消失\n              // throw new Error();\n            });\n          }}\n          onClosed={this.onClosed.bind(this, \"visible\")}\n        >\n          这里是利用 <b>Promise</b>{\" \"}\n          的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。\n          <br />\n          <br />\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则\n          执行 <b>reject</b> 触发 <b>catch</b> 错误。\n        </Alert>\n        <Button onClick={this.onClick.bind(this, \"visible\")}>\n          延迟关闭对话框\n        </Button>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n147:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"information\"\n          type=\"primary\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-check\"\n          type=\"success\"\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible3}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"warning\"\n          type=\"warning\"\n          onClosed={this.onClosed.bind(this, \"visible3\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible4}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-close\"\n          type=\"danger\"\n          onClosed={this.onClosed.bind(this, \"visible4\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible5}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"light\"\n          onClosed={this.onClosed.bind(this, \"visible5\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          isOpen={this.state.visible6}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"dark\"\n          onClosed={this.onClosed.bind(this, \"visible6\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n261:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible1: false,\n      visible2: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ [type]: !this.state[type] });\n  }\n  onClosed(type) {\n    this.setState({ [type]: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible1}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"information\"\n          type=\"primary\"\n          onClosed={this.onClosed.bind(this, \"visible1\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible2}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"success\"\n          onClosed={this.onClosed.bind(this, \"visible2\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible3}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"warning\"\n          type=\"warning\"\n          onClosed={this.onClosed.bind(this, \"visible3\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible4}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          icon=\"circle-close\"\n          type=\"danger\"\n          onClosed={this.onClosed.bind(this, \"visible4\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible5}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"light\"\n          onClosed={this.onClosed.bind(this, \"visible5\")}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        />\n        <Alert\n          title=\"带标题的弹出框\"\n          isOpen={this.state.visible6}\n          confirmText=\"确定按钮\"\n          cancelText=\"取消按钮\"\n          type=\"dark\"\n          onClosed={this.onClosed.bind(this, \"visible6\")}\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\n          事件。用作通知用户重要信息。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this, \"visible1\")} type=\"primary\">\n            主要\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible2\")} type=\"success\">\n            成功\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible3\")} type=\"warning\">\n            警告\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible4\")} type=\"danger\">\n            错误\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible5\")} type=\"light\">\n            亮按钮\n          </Button>\n          <Button onClick={this.onClick.bind(this, \"visible6\")} type=\"dark\">\n            暗按钮\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n376:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClosed(type) {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible}\n          type=\"danger\"\n          useButton={false}\n          maskClosable={true}\n          onClose={this.onClosed.bind(this)}\n          // onClosed={this.onClosed.bind(this)}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n          <br />\n          <br />\n          <div className=\"w-alert-footer\">\n            <Button type=\"danger\" onClick={this.onClosed.bind(this)}>\n              确定按钮\n            </Button>\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\n          </div>\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n432:`import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Alert, ButtonGroup, Button } from \"uiw\";\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      visible: false,\n    };\n  }\n  onClick(type) {\n    this.setState({ visible: !this.state.visible });\n  }\n  onClosed(type) {\n    this.setState({ visible: false });\n  }\n  render() {\n    return (\n      <div>\n        <Alert\n          isOpen={this.state.visible}\n          type=\"danger\"\n          maskClosable={true}\n          hasBackdrop={false}\n          onClose={this.onClosed.bind(this)}\n          onClosed={this.onClosed.bind(this)}\n          content=\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\"\n        >\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\n        </Alert>\n        <ButtonGroup>\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\nexport default Demo;`,\n};\n const BaseCodeData={19:BaseCode19,\n81:BaseCode81,\n147:BaseCode147,\n261:BaseCode261,\n376:BaseCode376,\n432:BaseCode432,\n}\n    export default {\n      source:\"# Alert 确认对话框\\n\\n[![Open in unpkg](https://img.shields.io/badge/Open%20in-unpkg-blue)](https://uiwjs.github.io/npm-unpkg/#/pkg/@uiw/react-alert/file/README.md)\\n[![NPM Downloads](https://img.shields.io/npm/dm/@uiw/react-alert.svg?style=flat)](https://www.npmjs.com/package/@uiw/react-alert)\\n[![npm version](https://img.shields.io/npm/v/@uiw/react-alert.svg?label=@uiw/react-alert)](https://npmjs.com/@uiw/react-alert)\\n\\n弹出对话框会在继续之前，通知用户重要信息，点击确定后异步关闭对话框。\\n\\n```js\\nimport { Alert } from \\\"uiw\\\";\\n// or\\nimport Alert from \\\"@uiw/react-alert\\\";\\n```\\n\\n## 基本用法\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => console.log(\\\"您点击了确定按钮！\\\")}\\n          onCancel={() => console.log(\\\"您点击了取消按钮！\\\")}\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")}>\\n            单个按钮确认对话框\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")}>\\n            确认对话框\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## 延迟关闭对话框\\n\\n这里是利用 `Promise` 等它执行完成再去关闭窗口\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick() {\\n    this.setState({ visible: !this.statevisible });\\n  }\\n  onClosed() {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          icon=\\\"delete\\\"\\n          isOpen={this.state.visible}\\n          confirmText=\\\"确定按钮\\\"\\n          type=\\\"danger\\\"\\n          onConfirm={() => {\\n            console.log(\\\"确定回调！, 这里是利用Promise等执行完成再去关闭窗口\\\");\\n            return new Promise((resolve, reject) => {\\n              const random = Math.random();\\n              console.log(\\n                \\\"测试，随机值大于 0.5 执行 resolve 事件，否则 执行 reject 触发 catch 错误\\\",\\n                random,\\n                random > 0.5\\n              );\\n              setTimeout(random > 0.5 ? resolve : reject, 3000);\\n            }).catch(() => {\\n              // 可以通过下面方式，阻止弹框消失\\n              // throw new Error();\\n            });\\n          }}\\n          onClosed={this.onClosed.bind(this, \\\"visible\\\")}\\n        >\\n          这里是利用 <b>Promise</b>{\\\" \\\"}\\n          的特性，等它执行完成后，再去关闭窗口，达到延迟关闭的效果。\\n          <br />\\n          <br />\\n          这个测试例子，生成随机值判断是否大于 <b>0.5</b> 执行 <b>resolve</b> 事件，否则\\n          执行 <b>reject</b> 触发 <b>catch</b> 错误。\\n        </Alert>\\n        <Button onClick={this.onClick.bind(this, \\\"visible\\\")}>\\n          延迟关闭对话框\\n        </Button>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## 带图标的弹出框\\n\\n通过设置 `icon` 和 `type` 参数设置带状态的弹出对话框。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-check\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible3\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible4\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible5\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible6\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")} type=\\\"primary\\\">\\n            主要\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")} type=\\\"success\\\">\\n            成功\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible3\\\")} type=\\\"warning\\\">\\n            警告\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible4\\\")} type=\\\"danger\\\">\\n            错误\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible5\\\")} type=\\\"light\\\">\\n            亮按钮\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible6\\\")} type=\\\"dark\\\">\\n            暗按钮\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n```js\\nimport { Alert } from \\\"uiw\\\";\\n// or\\nimport Alert from \\\"@uiw/react-alert\\\";\\n```\\n\\n## 带标题的弹出框\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible1: false,\\n      visible2: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ [type]: !this.state[type] });\\n  }\\n  onClosed(type) {\\n    this.setState({ [type]: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible1}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"information\\\"\\n          type=\\\"primary\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible1\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible2}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"success\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible2\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible3}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"warning\\\"\\n          type=\\\"warning\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible3\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible4}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          icon=\\\"circle-close\\\"\\n          type=\\\"danger\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible4\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible5}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"light\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible5\\\")}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        />\\n        <Alert\\n          title=\\\"带标题的弹出框\\\"\\n          isOpen={this.state.visible6}\\n          confirmText=\\\"确定按钮\\\"\\n          cancelText=\\\"取消按钮\\\"\\n          type=\\\"dark\\\"\\n          onClosed={this.onClosed.bind(this, \\\"visible6\\\")}\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，触发 “<b>onConfirm</b>” 或 “<b>onCancel</b>”\\n          事件。用作通知用户重要信息。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this, \\\"visible1\\\")} type=\\\"primary\\\">\\n            主要\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible2\\\")} type=\\\"success\\\">\\n            成功\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible3\\\")} type=\\\"warning\\\">\\n            警告\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible4\\\")} type=\\\"danger\\\">\\n            错误\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible5\\\")} type=\\\"light\\\">\\n            亮按钮\\n          </Button>\\n          <Button onClick={this.onClick.bind(this, \\\"visible6\\\")} type=\\\"dark\\\">\\n            暗按钮\\n          </Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n### 自定义按钮\\n\\n这个对话框有两个按钮，单击 **`确定按钮`** 或 **`取消按钮`** 后，此对话框将关闭，将不触发 ~~`onConfirm`~~ 或 ~~`onCancel`~~ 事件。因为这俩按钮是自定义按钮。你可以正对自定义按钮外面的对象定义 `className=\\\"w-alert-footer\\\"` 将显示默认样式。\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          useButton={false}\\n          maskClosable={true}\\n          onClose={this.onClosed.bind(this)}\\n          // onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n          <br />\\n          <br />\\n          <div className=\\\"w-alert-footer\\\">\\n            <Button type=\\\"danger\\\" onClick={this.onClosed.bind(this)}>\\n              确定按钮\\n            </Button>\\n            <Button onClick={this.onClosed.bind(this)}>取消按钮</Button>\\n          </div>\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n### 不显示遮罩层\\n\\n<!--rehype:bgWhite=true&codeSandbox=true&codePen=true-->\\n\\n```jsx\\nimport React from \\\"react\\\";\\nimport ReactDOM from \\\"react-dom\\\";\\nimport { Alert, ButtonGroup, Button } from \\\"uiw\\\";\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      visible: false,\\n    };\\n  }\\n  onClick(type) {\\n    this.setState({ visible: !this.state.visible });\\n  }\\n  onClosed(type) {\\n    this.setState({ visible: false });\\n  }\\n  render() {\\n    return (\\n      <div>\\n        <Alert\\n          isOpen={this.state.visible}\\n          type=\\\"danger\\\"\\n          maskClosable={true}\\n          hasBackdrop={false}\\n          onClose={this.onClosed.bind(this)}\\n          onClosed={this.onClosed.bind(this)}\\n          content=\\\"这个对话框只有两个个按钮，单击“确定按钮”后，此对话框将关闭。用作通知用户重要信息。\\\"\\n        >\\n          这个对话框有两个按钮，单击 “<b>确定按钮</b>” 或 “<b>取消按钮</b>”\\n          后，此对话框将关闭，将不触发 “<del>onConfirm</del>” 或 “\\n          <del>onCancel</del>” 事件。因为这俩按钮是自定义按钮。\\n        </Alert>\\n        <ButtonGroup>\\n          <Button onClick={this.onClick.bind(this)}>单个按钮确认对话框</Button>\\n        </ButtonGroup>\\n      </div>\\n    );\\n  }\\n}\\nexport default Demo;\\n```\\n\\n## Props\\n\\n虽然类似于对 `<Modal>`，但 `<Alert>` 更具限制性，只应用于重要信息。此组件继承 [`<Modal>`](#/components/modal) 的属性，所以部分参数可以参考 `<Modal>` 组件。\\n\\n| 参数                                        | 说明                                                                                                                                                  | 类型             | 默认值  |\\n| ------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------- | ------- |\\n| onCancel                                    | 取消按钮的回调函数                                                                                                                                    | Function(e)      | -       |\\n| onConfirm                                   | 点击确定按钮回调                                                                                                                                      | Function(e)      | -       |\\n| cancelText                                  | 取消按钮文字，                                                                                                                                        | String           | -       |\\n| confirmText                                 | 确认按钮文字                                                                                                                                          | String           | `确认`  |\\n| type                                        | 按钮类型跟 `<Button>` 组件的 `type` 参数一致，同时会影响按钮颜色。                                                                                    | String           | `light` |\\n| icon[`<Modal>`](#/components/modal)         | 设置对话框右上角图标，，设置 `type` 将图标设置不同的颜色。当前属性为 [`<Icon>`](#/components/icon) 组件的 `type` 属性，所以可以参考该组件自定义图标。 | String/ReactNode | -       |\\n| title[`<Modal>`](#/components/modal)        | 设置标题                                                                                                                                              | Function(e)      | -       |\\n| useButton[`<Modal>`](#/components/modal)    | 是否使用默认按钮，如果设置 `false` 需要自定义按钮关闭                                                                                                 | Boolean          | `true`  |\\n| isOpen[`<Modal>`](#/components/modal)       | 对话框是否可见                                                                                                                                        | Boolean          | `false` |\\n| maskClosable[`<Modal>`](#/components/modal) | 点击遮罩层是否允许关闭                                                                                                                                | boolean          | `true`  |\\n\\n更多属性文档请参考 [Modal](#/components/modal)。\\n\",\n      BaseCodeData,\n      codeBlockValue\n    }\n"],"names":["BaseCodeData","ComponentBaseCode19","state","visible1","visible2","type","this","setState","isOpen","confirmText","onClosed","bind","content","cancelText","onConfirm","console","log","onCancel","onClick","React","ComponentBaseCode81","visible","statevisible","icon","Promise","resolve","reject","random","Math","setTimeout","catch","ComponentBaseCode147","visible3","visible4","visible5","visible6","ComponentBaseCode261","title","ComponentBaseCode376","useButton","maskClosable","onClose","className","ComponentBaseCode432","hasBackdrop","source","codeBlockValue"],"sourceRoot":""}